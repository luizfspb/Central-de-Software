using System;
using System.Drawing;
using System.Windows.Forms;
using Central_de_Software.Utilities;
using System.IO;
using System.Threading.Tasks;

public class UserControlSoftware : UserControl
{
    private FlowLayoutPanel mainPanel;

    public UserControlSoftware()
    {
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        this.Dock = DockStyle.Fill;
        this.BackColor = Color.White;

        mainPanel = new FlowLayoutPanel
        {
            Dock = DockStyle.Fill,
            FlowDirection = FlowDirection.TopDown,
            AutoScroll = true,
            WrapContents = false,
            Padding = new Padding(30),
            BackColor = Color.White
        };

        // Adiciona os painéis de software com botões
        mainPanel.Controls.Add(CriarBotoesSoftware("AnyDesk", "anydesk.png"));
        mainPanel.Controls.Add(CriarBotoesSoftware("Google Chrome", "chrome.png"));
        mainPanel.Controls.Add(CriarBotoesSoftware("WinRAR", "winrar.png"));
        mainPanel.Controls.Add(CriarBotoesSoftware("WhatsApp Desktop", "whatsapp.png"));
        mainPanel.Controls.Add(CriarBotoesSoftware("Adobe Acrobat Reader", "adobe.png"));
        mainPanel.Controls.Add(CriarBotoesSoftware("Revo Uninstaller", "revo.png"));
        mainPanel.Controls.Add(CriarBotoesSoftware("Office 365", "office.png"));
        mainPanel.Controls.Add(CriarPainel3uTools());
        this.Controls.Add(mainPanel);
    }

    private Panel CriarBotoesSoftware(string nome, string icone)
    {
        var panel = new Panel
        {
            Width = 600,
            Height = nome == "AnyDesk" ? 140 : 80,
            Margin = new Padding(0, 0, 0, 20),
            BackColor = Color.WhiteSmoke,
            Padding = new Padding(10)
        };

        var btnInstalar = CriarBotao($"Instalar {nome}", icone, () => Instalar(nome), Color.White, ColorTranslator.FromHtml("#1A377B"));
        btnInstalar.Location = new Point(10, 10);
        panel.Controls.Add(btnInstalar);

        var btnDesinstalar = CriarBotao($"Desinstalar {nome}", icone, () => Desinstalar(nome), Color.White, ColorTranslator.FromHtml("#F15A22"));
        btnDesinstalar.Location = new Point(190, 10);
        panel.Controls.Add(btnDesinstalar);

        if (nome == "AnyDesk")
        {
            var btnLimparCache = CriarBotao("Limpar Cache do AnyDesk", icone, () => LimparCacheAnyDesk(), Color.White, ColorTranslator.FromHtml("#1A377B"));
            btnLimparCache.Location = new Point(10, 75);
            btnLimparCache.Width = 370;
            panel.Controls.Add(btnLimparCache);
        }

        return panel;
    }

    private Button CriarBotao(string texto, string icone, Func<Task> onClick, Color backColor, Color foreColor)
    {
        var btn = new Button
        {
            Text = texto,
            Width = 170,
            Height = 54,
            Font = new Font("Segoe UI", 10, FontStyle.Bold),
            Image = ResourceImages.GetImage(icone),
            ImageAlign = ContentAlignment.MiddleLeft,
            TextAlign = ContentAlignment.MiddleRight,
            FlatStyle = FlatStyle.Flat,
            BackColor = backColor,
            ForeColor = foreColor,
            TextImageRelation = TextImageRelation.ImageBeforeText
        };
        btn.FlatAppearance.BorderSize = 0;
        btn.FlatAppearance.MouseOverBackColor = ColorTranslator.FromHtml("#F15A22");
        btn.FlatAppearance.MouseDownBackColor = ColorTranslator.FromHtml("#1A377B");
        btn.Click += async (s, e) => await onClick();
        return btn;
    }

    private async Task Instalar(string nome)
    {
        string resourceName = null, tempName = null, args = "";
        switch (nome)
        {
            case "AnyDesk":
                resourceName = "Central_de_Software.softwares.AnyDesk.exe";
                tempName = "AnyDesk.exe";
                break;
            case "Google Chrome":
                resourceName = "Central_de_Software.softwares.ChromeSetup.exe";
                tempName = "ChromeSetup.exe";
                break;
            case "WinRAR":
                resourceName = "Central_de_Software.softwares.winrar-x64-713.exe";
                tempName = "winrar-x64-713.exe";
                break;
            case "WhatsApp Desktop":
                resourceName = "Central_de_Software.softwares.WhatsApp Installer.exe";
                tempName = "WhatsApp Installer.exe";
                break;
            case "Adobe Acrobat Reader":
                resourceName = "Central_de_Software.softwares.Reader_br_install.exe";
                tempName = "Reader_br_install.exe";
                break;
            case "Revo Uninstaller":
                resourceName = "Central_de_Software.softwares.revosetup.exe";
                tempName = "revosetup.exe";
                break;
            case "Office 365":
                resourceName = "Central_de_Software.softwares.Office365Setup.exe";
                tempName = "Office365Setup.exe";
                break;
        }
        if (resourceName != null && tempName != null)
        {
            try
            {
                await SoftwareInstaller.InstallFromEmbeddedAsync(resourceName, tempName, args, true);
                MessageBox.Show($"{nome} instalado com sucesso!", "Instalação", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao instalar {nome}: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }

    private async Task Desinstalar(string nome)
    {
        try
        {
            if (!SoftwareInstaller.IsSoftwareInstalled(nome))
            {
                MessageBox.Show($"{nome} não está instalado.", "Informação", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            var result = MessageBox.Show($"Tem certeza que deseja desinstalar {nome}?", "Confirmação", 
                MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            
            if (result == DialogResult.Yes)
            {
                var psi = new System.Diagnostics.ProcessStartInfo("cmd.exe", $"/c wmic product where \"Name like '%{nome}%'\" call uninstall /nointeractive")
                {
                    UseShellExecute = true,
                    Verb = "runas",
                    CreateNoWindow = true
                };
                var proc = System.Diagnostics.Process.Start(psi);
                if (proc != null)
                {
                    await Task.Run(() => proc.WaitForExit());
                    MessageBox.Show($"Desinstalação de {nome} concluída.", "Desinstalação", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Erro ao desinstalar {nome}: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private async Task LimparCacheAnyDesk()
    {
        try
        {
            var result = MessageBox.Show(
                "Isso irá desinstalar o AnyDesk, limpar o cache e reinstalá-lo novamente.\n\n" +
                "Deseja continuar?", 
                "Limpar Cache do AnyDesk",
                MessageBoxButtons.YesNo,
                MessageBoxIcon.Question);

            if (result == DialogResult.Yes)
            {
                await Desinstalar("AnyDesk");
                
                string roaming = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string anydeskPath = Path.Combine(roaming, "AnyDesk");
                if (Directory.Exists(anydeskPath))
                {
                    Directory.Delete(anydeskPath, true);
                    MessageBox.Show("Cache do AnyDesk removido com sucesso!", "Limpeza de Cache", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                await Instalar("AnyDesk");
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Erro ao limpar cache do AnyDesk: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private Panel CriarPainel3uTools()
    {
        var panel = new Panel
        {
            Width = 600,
            Height = 80,
            Margin = new Padding(0, 0, 0, 20),
            BackColor = Color.WhiteSmoke,
            Padding = new Padding(10)
        };
        var btnAbrir = new Button
        {
            Text = "Abrir 3uTools",
            Width = 200,
            Height = 54,
            Font = new Font("Segoe UI", 10, FontStyle.Bold),
            ImageAlign = ContentAlignment.MiddleLeft,
            TextAlign = ContentAlignment.MiddleRight,
            FlatStyle = FlatStyle.Flat,
            BackColor = Color.White,
            ForeColor = ColorTranslator.FromHtml("#1A377B"),
            TextImageRelation = TextImageRelation.ImageBeforeText
        };
        btnAbrir.FlatAppearance.BorderSize = 0;
        btnAbrir.FlatAppearance.MouseOverBackColor = ColorTranslator.FromHtml("#F15A22");
        btnAbrir.FlatAppearance.MouseDownBackColor = ColorTranslator.FromHtml("#1A377B");
        btnAbrir.Click += async (s, e) => await Abrir3uTools();
        panel.Controls.Add(btnAbrir);
        return panel;
    }

    private async Task Abrir3uTools()
    {
        try
        {
            var psi = new System.Diagnostics.ProcessStartInfo
            {
                FileName = "C:\\Program Files\\3uToolsV3\\3uTooIs.exe",
                UseShellExecute = false,
                Verb = "runas",
                UserName = "administrador",
                Password = ConvertToSecureString("vcardu@2509"),
                Domain = Environment.MachineName
            };
            System.Diagnostics.Process.Start(psi);
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Erro ao abrir 3uTools: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private System.Security.SecureString ConvertToSecureString(string senha)
    {
        var secure = new System.Security.SecureString();
        foreach (char c in senha)
            secure.AppendChar(c);
        secure.MakeReadOnly();
        return secure;
    }
}
