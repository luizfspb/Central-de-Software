using System;
using System.Diagnostics;
using System.Management;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.Linq;
using System.ServiceProcess;

namespace Central_de_Software
{
    public class UserControlDiagnostics : UserControl
    {
        private RichTextBox richTextBoxInfo;
        private Button btnDiagnostico;
        private Button btnCopiar;
        private Button btnSalvar;
        private SaveFileDialog saveFileDialog;

        public UserControlDiagnostics()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.Width = 700;
            this.Height = 660;
            this.Dock = DockStyle.Fill;

            richTextBoxInfo = new RichTextBox
            {
                Top = 50,
                Left = 10,
                Width = 670,
                Height = 550,
                ReadOnly = true,
                Font = new System.Drawing.Font("Consolas", 10F),
                BackColor = System.Drawing.Color.White
            };

            btnDiagnostico = new Button
            {
                Text = "Executar Diagnóstico",
                Top = 10,
                Left = 10,
                Width = 180,
                Height = 30
            };
            btnDiagnostico.Click += btnDiagnostico_Click;

            btnCopiar = new Button
            {
                Text = "Copiar Resultados",
                Top = 10,
                Left = 200,
                Width = 140,
                Height = 30,
                Enabled = false
            };
            btnCopiar.Click += btnCopiar_Click;

            btnSalvar = new Button
            {
                Text = "Salvar Relatório",
                Top = 10,
                Left = 350,
                Width = 140,
                Height = 30,
                Enabled = false
            };
            btnSalvar.Click += btnSalvar_Click;

            saveFileDialog = new SaveFileDialog
            {
                Filter = "Arquivo de texto|*.txt",
                Title = "Salvar relatório de diagnóstico"
            };

            this.Controls.Add(richTextBoxInfo);
            this.Controls.Add(btnDiagnostico);
            this.Controls.Add(btnCopiar);
            this.Controls.Add(btnSalvar);
        }

        private async void btnDiagnostico_Click(object sender, EventArgs e)
        {
            try
            {
                btnDiagnostico.Enabled = false;
                richTextBoxInfo.Clear();
                AppendLine("=== Iniciando diagnóstico do sistema ===\n");

                await Task.Run(() =>
                {
                    ColetarInformacoesWindows();
                    ColetarInformacoesCPU();
                    ColetarInformacoesRAM();
                    ColetarInformacoesArmazenamento();
                    ColetarInformacoesRede();
                    ColetarInformacoesAntivirus();
                    ColetarInformacoesServicos();
                });

                AppendLine("\n=== Diagnóstico concluído ===");
                btnCopiar.Enabled = true;
                btnSalvar.Enabled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao executar diagnóstico: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                btnDiagnostico.Enabled = true;
            }
        }

        private void ColetarInformacoesWindows()
        {
            AppendLine("--- Informações do Windows ---");
            try
            {
                using (var win = new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem"))
                {
                    foreach (var item in win.Get())
                    {
                        AppendLine($"Sistema Operacional: {item["Caption"]}");
                        AppendLine($"Versão: {item["Version"]}");
                        AppendLine($"Arquitetura: {item["OSArchitecture"]}");
                        AppendLine($"Último Boot: {ManagementDateTimeConverter.ToDateTime(item["LastBootUpTime"].ToString())}");
                    }
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações do Windows: {ex.Message}");
            }
            AppendLine("");
        }

        private void ColetarInformacoesCPU()
        {
            AppendLine("--- Informações da CPU ---");
            try
            {
                using (var cpu = new ManagementObjectSearcher("SELECT * FROM Win32_Processor"))
                {
                    foreach (var item in cpu.Get())
                    {
                        AppendLine($"Processador: {item["Name"]}");
                        AppendLine($"Núcleos: {item["NumberOfCores"]}");
                        AppendLine($"Threads: {item["NumberOfLogicalProcessors"]}");
                        AppendLine($"Velocidade: {item["MaxClockSpeed"]} MHz");
                    }
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações da CPU: {ex.Message}");
            }
            AppendLine("");
        }

        private void ColetarInformacoesRAM()
        {
            AppendLine("--- Informações da Memória RAM ---");
            try
            {
                using (var ram = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystem"))
                {
                    foreach (var item in ram.Get())
                    {
                        ulong totalMemoryKB = ulong.Parse(item["TotalPhysicalMemory"].ToString()) / 1024;
                        ulong totalMemoryMB = totalMemoryKB / 1024;
                        ulong totalMemoryGB = totalMemoryMB / 1024;
                        AppendLine($"Memória Total: {totalMemoryGB} GB");
                    }
                }

                using (var ram = new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem"))
                {
                    foreach (var item in ram.Get())
                    {
                        ulong freeMemoryKB = ulong.Parse(item["FreePhysicalMemory"].ToString());
                        ulong freeMemoryMB = freeMemoryKB / 1024;
                        ulong freeMemoryGB = freeMemoryMB / 1024;
                        AppendLine($"Memória Livre: {freeMemoryGB} GB");
                    }
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações da RAM: {ex.Message}");
            }
            AppendLine("");
        }

        private void ColetarInformacoesArmazenamento()
        {
            AppendLine("--- Informações de Armazenamento ---");
            try
            {
                foreach (var drive in System.IO.DriveInfo.GetDrives().Where(d => d.IsReady))
                {
                    AppendLine($"Unidade: {drive.Name}");
                    AppendLine($"Rótulo: {drive.VolumeLabel}");
                    AppendLine($"Sistema de Arquivos: {drive.DriveFormat}");
                    AppendLine($"Espaço Total: {drive.TotalSize / 1073741824} GB");
                    AppendLine($"Espaço Livre: {drive.AvailableFreeSpace / 1073741824} GB");
                    AppendLine("");
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações de armazenamento: {ex.Message}");
            }
            AppendLine("");
        }

        private void ColetarInformacoesRede()
        {
            AppendLine("--- Informações de Rede ---");
            try
            {
                using (var net = new ManagementObjectSearcher("SELECT * FROM Win32_NetworkAdapter WHERE PhysicalAdapter=True"))
                {
                    foreach (var item in net.Get())
                    {
                        AppendLine($"Adaptador: {item["Name"]}");
                        AppendLine($"Fabricante: {item["Manufacturer"]}");
                        AppendLine($"Status: {(item["NetEnabled"]?.ToString() == "True" ? "Conectado" : "Desconectado")}");
                        AppendLine("");
                    }
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações de rede: {ex.Message}");
            }
            AppendLine("");
        }

        private void ColetarInformacoesAntivirus()
        {
            AppendLine("--- Informações do Antivírus ---");
            try
            {
                using (var av = new ManagementObjectSearcher(@"root\SecurityCenter2", "SELECT * FROM AntivirusProduct"))
                {
                    bool encontrado = false;
                    foreach (var item in av.Get())
                    {
                        encontrado = true;
                        AppendLine($"Nome: {item["displayName"]}");
                        AppendLine($"Estado: {(item["productState"]?.ToString() == "397568" ? "Ativo" : "Inativo")}");
                        AppendLine("");
                    }
                    if (!encontrado)
                    {
                        AppendLine("Nenhum antivírus detectado");
                    }
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações do antivírus: {ex.Message}");
            }
            AppendLine("");
        }

        private void ColetarInformacoesServicos()
        {
            AppendLine("--- Serviços Importantes ---");
            try
            {
                string[] servicosImportantes = { "wuauserv", "WinDefend", "wscsvc", "Spooler" };
                foreach (var servico in servicosImportantes)
                {
                    try
                    {
                        using (var sc = new ServiceController(servico))
                        {
                            AppendLine($"Serviço: {sc.DisplayName}");
                            AppendLine($"Status: {sc.Status}");
                            AppendLine($"Tipo de Inicialização: {sc.StartType}");
                            AppendLine("");
                        }
                    }
                    catch
                    {
                        AppendLine($"Serviço {servico} não encontrado");
                        AppendLine("");
                    }
                }
            }
            catch (Exception ex)
            {
                AppendLine($"Erro ao coletar informações dos serviços: {ex.Message}");
            }
        }

        private void AppendLine(string text)
        {
            if (richTextBoxInfo.InvokeRequired)
            {
                richTextBoxInfo.Invoke(new Action<string>(AppendLine), text);
            }
            else
            {
                richTextBoxInfo.AppendText(text + Environment.NewLine);
            }
        }

        private void btnCopiar_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(richTextBoxInfo.Text))
            {
                Clipboard.SetText(richTextBoxInfo.Text);
                MessageBox.Show("Informações copiadas para a área de transferência!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btnSalvar_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(richTextBoxInfo.Text))
                return;

            saveFileDialog.FileName = $"Diagnostico_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    System.IO.File.WriteAllText(saveFileDialog.FileName, richTextBoxInfo.Text);
                    MessageBox.Show("Relatório salvo com sucesso!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Erro ao salvar o relatório: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
    }
}