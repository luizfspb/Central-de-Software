using System;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Central_de_Software
{
    public class UserControlDiagnosticsTech : UserControlDiagnostics
    {
        private const string DEFAULT_PASSWORD = "1212";
        private string currentPassword = DEFAULT_PASSWORD;

        public UserControlDiagnosticsTech() : base()
        {
            this.BackColor = Color.FromArgb(30, 30, 30);
            ConfigureDarkTheme();

            // Substitui o evento do botão para diagnóstico técnico
            btnDiagnostico.Click -= base.btnDiagnostico_Click;
            btnDiagnostico.Click += DiagnosticoTecnico_Click;
            btnDiagnostico.Text = "Executar Diagnóstico Completo";
        }

        private void ConfigureDarkTheme()
        {
            // Configure dark theme for rich text box
            richTextBoxInfo.BackColor = Color.FromArgb(45, 45, 45);
            richTextBoxInfo.ForeColor = Color.LightGray;

            // Configure dark theme for buttons
            ConfigureButtonDarkTheme(btnDiagnostico);
            ConfigureButtonDarkTheme(btnCopiar);
            ConfigureButtonDarkTheme(btnSalvar);

            // Add change password button
            var btnChangePassword = new Button
            {
                Text = "Alterar Senha",
                Top = 10,
                Left = 500,
                Width = 140,
                Height = 30,
                FlatStyle = FlatStyle.Flat,
                BackColor = Color.FromArgb(60, 60, 60),
                ForeColor = Color.White
            };
            btnChangePassword.FlatAppearance.BorderSize = 0;
            btnChangePassword.Click += BtnChangePassword_Click;
            this.Controls.Add(btnChangePassword);
        }

        private void ConfigureButtonDarkTheme(Button button)
        {
            button.BackColor = Color.FromArgb(60, 60, 60);
            button.ForeColor = Color.White;
            button.FlatAppearance.MouseOverBackColor = Color.FromArgb(80, 80, 80);
        }

        private void BtnChangePassword_Click(object sender, EventArgs e)
        {
            using (var form = new Form
            {
                Width = 300,
                Height = 150,
                FormBorderStyle = FormBorderStyle.FixedDialog,
                StartPosition = FormStartPosition.CenterParent,
                Text = "Alterar Senha",
                BackColor = Color.FromArgb(30, 30, 30)
            })
            {
                var txtOldPass = new TextBox
                {
                    Left = 20,
                    Top = 20,
                    Width = 240,
                    UseSystemPasswordChar = true,
                    BackColor = Color.FromArgb(45, 45, 45),
                    ForeColor = Color.White
                };

                var txtNewPass = new TextBox
                {
                    Left = 20,
                    Top = 50,
                    Width = 240,
                    UseSystemPasswordChar = true,
                    BackColor = Color.FromArgb(45, 45, 45),
                    ForeColor = Color.White
                };

                var btnOk = new Button
                {
                    Text = "OK",
                    Left = 100,
                    Top = 80,
                    Width = 80,
                    DialogResult = DialogResult.OK,
                    BackColor = Color.FromArgb(60, 60, 60),
                    ForeColor = Color.White,
                    FlatStyle = FlatStyle.Flat
                };
                btnOk.FlatAppearance.BorderSize = 0;

                var lblOld = new Label
                {
                    Text = "Senha Atual:",
                    Left = 20,
                    Top = 4,
                    AutoSize = true,
                    ForeColor = Color.White
                };

                var lblNew = new Label
                {
                    Text = "Nova Senha:",
                    Left = 20,
                    Top = 34,
                    AutoSize = true,
                    ForeColor = Color.White
                };

                form.Controls.AddRange(new Control[] { txtOldPass, txtNewPass, btnOk, lblOld, lblNew });

                if (form.ShowDialog() == DialogResult.OK)
                {
                    if (txtOldPass.Text == currentPassword)
                    {
                        if (!string.IsNullOrWhiteSpace(txtNewPass.Text))
                        {
                            currentPassword = txtNewPass.Text;
                            MessageBox.Show("Senha alterada com sucesso!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                        else
                        {
                            MessageBox.Show("A nova senha não pode estar em branco!", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        MessageBox.Show("Senha atual incorreta!", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
        }

        private async void DiagnosticoTecnico_Click(object sender, EventArgs e)
        {
            try
            {
                btnDiagnostico.Enabled = false;
                richTextBoxInfo.Clear();
                AppendLine("=== Iniciando diagnóstico do sistema (Técnico) ===\n");

                await Task.Run(() =>
                {
                    if (managementObjectSearcherType != null)
                    {
                        ColetarInformacoesWindows();
                        ColetarInformacoesCPU();
                        ColetarInformacoesRAM();
                        ColetarInformacoesArmazenamento();
                        ColetarInformacoesRede();
                        ColetarInformacoesAntivirus();
                        if (serviceControllerType != null)
                        {
                            ColetarInformacoesServicos();
                        }
                    }
                });

                AppendLine("\n=== Diagnóstico concluído ===");
                btnCopiar.Enabled = true;
                btnSalvar.Enabled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao executar diagnóstico: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                btnDiagnostico.Enabled = true;
            }
        }

        public bool ValidatePassword(string password)
        {
            return password == currentPassword;
        }
    }
}
