using System;
using System.Windows.Forms;
using System.Xml;
using System.IO;

public class UserControlFiscalXmlEditor : UserControl
{
    private Button btnImportarXML;
    private Button btnSalvarXML;
    private GroupBox groupBoxDadosNFe;
    private Label lblNumeroNF;
    private Label lblEmitente;
    private Label lblDestinatario;
    private Label lblDataEmissao;
    private Label lblValorTotal;
    private DataGridView gridProdutos;
    private OpenFileDialog openFileDialog;
    private SaveFileDialog saveFileDialog;
    private XmlDocument xmlDoc;
    private string xmlPath;

    public UserControlFiscalXmlEditor()
    {
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        this.btnImportarXML = new Button
        {
            Text = "Importar XML",
            Location = new System.Drawing.Point(10, 10),
            Width = 120,
            Height = 30
        };
        this.btnImportarXML.Click += BtnImportarXML_Click;

        this.btnSalvarXML = new Button
        {
            Text = "Salvar XML",
            Location = new System.Drawing.Point(140, 10),
            Width = 120,
            Height = 30,
            Enabled = false
        };
        this.btnSalvarXML.Click += BtnSalvarXML_Click;

        this.groupBoxDadosNFe = new GroupBox
        {
            Text = "Dados da NF-e",
            Location = new System.Drawing.Point(10, 50),
            Width = 660,
            Height = 150
        };

        this.lblNumeroNF = new Label { Location = new System.Drawing.Point(10, 20), AutoSize = true };
        this.lblEmitente = new Label { Location = new System.Drawing.Point(10, 40), AutoSize = true };
        this.lblDestinatario = new Label { Location = new System.Drawing.Point(10, 60), AutoSize = true };
        this.lblDataEmissao = new Label { Location = new System.Drawing.Point(10, 80), AutoSize = true };
        this.lblValorTotal = new Label { Location = new System.Drawing.Point(10, 100), AutoSize = true };

        groupBoxDadosNFe.Controls.AddRange(new Control[]
        {
            lblNumeroNF, lblEmitente, lblDestinatario, lblDataEmissao, lblValorTotal
        });

        this.gridProdutos = new DataGridView
        {
            Location = new System.Drawing.Point(10, 210),
            Width = 660,
            Height = 300,
            AllowUserToAddRows = false,
            AllowUserToDeleteRows = false,
            ReadOnly = false,
            MultiSelect = false,
            SelectionMode = DataGridViewSelectionMode.CellSelect
        };

        gridProdutos.Columns.AddRange(new DataGridViewColumn[]
        {
            new DataGridViewTextBoxColumn { Name = "cProd", HeaderText = "Código", ReadOnly = true, Width = 80 },
            new DataGridViewTextBoxColumn { Name = "xProd", HeaderText = "Descrição", ReadOnly = true, Width = 250 },
            new DataGridViewTextBoxColumn { Name = "qCom", HeaderText = "Quantidade", ReadOnly = true, Width = 80 },
            new DataGridViewTextBoxColumn { Name = "uCom", HeaderText = "Un. Medida", ReadOnly = false, Width = 80 },
            new DataGridViewTextBoxColumn { Name = "vUnCom", HeaderText = "Valor Unit.", ReadOnly = true, Width = 80 },
            new DataGridViewTextBoxColumn { Name = "vProd", HeaderText = "Valor Total", ReadOnly = true, Width = 80 }
        });

        gridProdutos.CellValueChanged += GridProdutos_CellValueChanged;

        this.openFileDialog = new OpenFileDialog
        {
            Filter = "Arquivos XML|*.xml",
            Title = "Selecionar arquivo XML da NF-e"
        };

        this.saveFileDialog = new SaveFileDialog
        {
            Filter = "Arquivos XML|*.xml",
            Title = "Salvar arquivo XML da NF-e"
        };

        this.Controls.AddRange(new Control[]
        {
            btnImportarXML,
            btnSalvarXML,
            groupBoxDadosNFe,
            gridProdutos
        });
    }

    private void BtnImportarXML_Click(object sender, EventArgs e)
    {
        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
            try
            {
                xmlPath = openFileDialog.FileName;
                xmlDoc = new XmlDocument();
                xmlDoc.Load(xmlPath);

                XmlNamespaceManager nsManager = new XmlNamespaceManager(xmlDoc.NameTable);
                nsManager.AddNamespace("nfe", "http://www.portalfiscal.inf.br/nfe");

                var infNFe = xmlDoc.SelectSingleNode("//nfe:infNFe", nsManager);
                if (infNFe != null)
                {
                    lblNumeroNF.Text = $"Número NF-e: {infNFe.SelectSingleNode(".//nfe:nNF", nsManager)?.InnerText}";
                    lblEmitente.Text = $"Emitente: {infNFe.SelectSingleNode(".//nfe:emit/nfe:xNome", nsManager)?.InnerText}";
                    lblDestinatario.Text = $"Destinatário: {infNFe.SelectSingleNode(".//nfe:dest/nfe:xNome", nsManager)?.InnerText}";
                    lblDataEmissao.Text = $"Data Emissão: {DateTime.Parse(infNFe.SelectSingleNode(".//nfe:dhEmi", nsManager)?.InnerText).ToString("dd/MM/yyyy HH:mm:ss")}";
                    lblValorTotal.Text = $"Valor Total: R$ {infNFe.SelectSingleNode(".//nfe:total/nfe:ICMSTot/nfe:vNF", nsManager)?.InnerText}";

                    gridProdutos.Rows.Clear();
                    var produtos = infNFe.SelectNodes(".//nfe:det/nfe:prod", nsManager);
                    foreach (XmlNode produto in produtos)
                    {
                        int rowIndex = gridProdutos.Rows.Add();
                        var row = gridProdutos.Rows[rowIndex];
                        row.Cells["cProd"].Value = produto.SelectSingleNode("nfe:cProd", nsManager)?.InnerText;
                        row.Cells["xProd"].Value = produto.SelectSingleNode("nfe:xProd", nsManager)?.InnerText;
                        row.Cells["qCom"].Value = produto.SelectSingleNode("nfe:qCom", nsManager)?.InnerText;
                        row.Cells["uCom"].Value = produto.SelectSingleNode("nfe:uCom", nsManager)?.InnerText;
                        row.Cells["vUnCom"].Value = produto.SelectSingleNode("nfe:vUnCom", nsManager)?.InnerText;
                        row.Cells["vProd"].Value = produto.SelectSingleNode("nfe:vProd", nsManager)?.InnerText;
                    }
                }

                btnSalvarXML.Enabled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao carregar o XML: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }

    private void GridProdutos_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
        if (e.ColumnIndex == gridProdutos.Columns["uCom"].Index && e.RowIndex >= 0)
        {
            try
            {
                string novaUnidade = gridProdutos.Rows[e.RowIndex].Cells["uCom"].Value?.ToString();
                if (!string.IsNullOrWhiteSpace(novaUnidade))
                {
                    XmlNamespaceManager nsManager = new XmlNamespaceManager(xmlDoc.NameTable);
                    nsManager.AddNamespace("nfe", "http://www.portalfiscal.inf.br/nfe");

                    var produtos = xmlDoc.SelectNodes("//nfe:det/nfe:prod", nsManager);
                    var produto = produtos[e.RowIndex];
                    var uComNode = produto.SelectSingleNode("nfe:uCom", nsManager);
                    if (uComNode != null)
                    {
                        uComNode.InnerText = novaUnidade;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao atualizar a unidade de medida: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }

    private void BtnSalvarXML_Click(object sender, EventArgs e)
    {
        saveFileDialog.FileName = Path.GetFileName(xmlPath);
        if (saveFileDialog.ShowDialog() == DialogResult.OK)
        {
            try
            {
                xmlDoc.Save(saveFileDialog.FileName);
                MessageBox.Show("XML salvo com sucesso!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
                LimparSelecao();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Erro ao salvar o XML: {ex.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }

    private void LimparSelecao()
    {
        lblNumeroNF.Text = string.Empty;
        lblEmitente.Text = string.Empty;
        lblDestinatario.Text = string.Empty;
        lblDataEmissao.Text = string.Empty;
        lblValorTotal.Text = string.Empty;
        gridProdutos.Rows.Clear();
        btnSalvarXML.Enabled = false;
        xmlDoc = null;
        xmlPath = null;
    }
}
