using System;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

public class UserControlTools : UserControl
{
    private ListView listViewOptions;
    private Button btnExecutar;
    private Button btnLimparSelecao;
    private ProgressBar progressBar;
    private RichTextBox richTextBoxLog;

    private readonly (string Nome, string Descricao)[] opcoes = new[]
    {
        ("Criar ponto de restauração", "Cria um ponto de restauração do sistema para reversão segura."),
        ("Limpar arquivos temporários", "Remove arquivos temporários do Windows e libera espaço em disco."),
        ("Desativar Cortana", "Desativa o assistente virtual Cortana."),
        ("Desativar Telemetria", "Desativa coleta de dados de diagnóstico e telemetria."),
        ("Plano de energia: Alto Desempenho", "Configura o plano de energia para máximo desempenho."),
        ("Remover apps pré-instalados (bloatware)", "Remove aplicativos padrão desnecessários do Windows."),
        ("Desabilitar serviços desnecessários", "Desativa serviços do Windows que não são essenciais."),
        ("Windows Update manual", "Configura o Windows Update para modo manual."),
        ("Efeitos visuais para desempenho", "Ajusta efeitos visuais para priorizar desempenho."),
        ("Verificar arquivos do sistema (SFC) e disco (CHKDSK)", "Executa SFC e CHKDSK para corrigir erros do sistema e disco."),
        ("Limpar fila de impressão (Spooler)", "Limpa a fila de impressão e reinicia o serviço Spooler."),
        ("Solucionar problemas de rede", "Renova IP, limpa cache DNS e reseta configurações de rede."),
        ("Limpar atualizações antigas (DISM)", "Remove arquivos de atualizações antigas do Windows.")
    };

    public UserControlTools()
    {
        this.Width = 780;
        this.Height = 780;
        InitializeComponent();
    }

    private void InitializeComponent()
    {
        this.listViewOptions = new ListView
        {
            Top = 10,
            Left = 10,
            Width = 750,
            Height = 340,
            View = View.Details,
            CheckBoxes = true,
            FullRowSelect = true
        };
        listViewOptions.Columns.Add("Otimização", 270);
        listViewOptions.Columns.Add("Descrição", 460);
        foreach (var (nome, desc) in opcoes)
        {
            var item = new ListViewItem(nome);
            item.SubItems.Add(desc);
            listViewOptions.Items.Add(item);
        }

        this.btnExecutar = new Button { Text = "Executar Selecionados", Top = 360, Left = 10, Width = 180 };
        this.btnExecutar.Click += btnExecutar_Click;
        this.btnLimparSelecao = new Button { Text = "Limpar Seleção", Top = 360, Left = 200, Width = 140 };
        this.btnLimparSelecao.Click += btnLimparSelecao_Click;
        this.progressBar = new ProgressBar { Top = 400, Left = 10, Width = 750, Height = 20 };
        this.richTextBoxLog = new RichTextBox { Top = 430, Left = 10, Width = 750, Height = 320, ReadOnly = true };

        this.Controls.Add(listViewOptions);
        this.Controls.Add(btnExecutar);
        this.Controls.Add(btnLimparSelecao);
        this.Controls.Add(progressBar);
        this.Controls.Add(richTextBoxLog);
        this.Dock = DockStyle.Fill;
    }

    private void btnLimparSelecao_Click(object sender, EventArgs e)
    {
        foreach (ListViewItem item in listViewOptions.Items)
            item.Checked = false;
    }

    private async void btnExecutar_Click(object sender, EventArgs e)
    {
        btnExecutar.Enabled = false;
        btnLimparSelecao.Enabled = false;
        richTextBoxLog.Clear();
        progressBar.Value = 0;

        var indices = listViewOptions.CheckedIndices.Cast<int>().ToList();
        progressBar.Maximum = indices.Count > 0 ? indices.Count : 1;

        foreach (int i in indices)
        {
            await ExecutarOpcao(i + 1);
            progressBar.Value++;
        }

        btnExecutar.Enabled = true;
        btnLimparSelecao.Enabled = true;
        AppendToLog("Otimização concluída.");
        MessageBox.Show("Otimização concluída!", "Central de Software", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }

    private async Task ExecutarOpcao(int opcao)
    {
        switch (opcao)
        {
            case 1: await CriarPontoRestauracao(); break;
            case 2: await LimparArquivosTemporarios(); break;
            case 3: await DesativarCortana(); break;
            case 4: await DesativarTelemetria(); break;
            case 5: await PlanoAltoDesempenho(); break;
            case 6: await RemoverBloatware(); break;
            case 7: await DesabilitarServicos(); break;
            case 8: await WindowsUpdateManual(); break;
            case 9: await EfeitosVisuaisDesempenho(); break;
            case 10: await SFCeCHKDSK(); break;
            case 11: await LimparSpooler(); break;
            case 12: await SolucionarRede(); break;
            case 13: await LimparAtualizacoesAntigas(); break;
        }
    }

    private async Task CriarPontoRestauracao()
    {
        AppendToLog("Criando ponto de restauração...");
        await RunCommandAsync("powershell.exe", "-Command \"Checkpoint-Computer -Description 'Ponto de Restauracao - Otimizacao' -RestorePointType 'MODIFY_SETTINGS'\"");
        AppendToLog("Ponto de restauração criado.");
    }
    private async Task LimparArquivosTemporarios()
    {
        AppendToLog("Limpando arquivos temporários...");
        await RunCommandAsync("cmd.exe", "/c del /q /f /s \"%TEMP%\\*.*\" & del /q /f /s \"C:\\Windows\\Temp\\*.*\"");
        AppendToLog("Arquivos temporários removidos.");
    }
    private async Task DesativarCortana()
    {
        AppendToLog("Desativando Cortana...");
        await RunCommandAsync("reg.exe", "add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search\" /v AllowCortana /t REG_DWORD /d 0 /f");
        AppendToLog("Cortana desativada.");
    }
    private async Task DesativarTelemetria()
    {
        AppendToLog("Desativando Telemetria...");
        await RunCommandAsync("sc.exe", "stop DiagTrack");
        await RunCommandAsync("sc.exe", "config DiagTrack start= disabled");
        await RunCommandAsync("sc.exe", "stop dmwappushservice");
        await RunCommandAsync("sc.exe", "config dmwappushservice start= disabled");
        AppendToLog("Telemetria desativada.");
    }
    private async Task PlanoAltoDesempenho()
    {
        AppendToLog("Configurando plano de energia para Alto Desempenho...");
        await RunCommandAsync("powercfg.exe", "-setactive SCHEME_MIN");
        AppendToLog("Plano de energia configurado.");
    }
    private async Task RemoverBloatware()
    {
        AppendToLog("Removendo apps pré-instalados...");
        string[] packages = { "xboxapp", "xboxgamingoverlay", "solitairecollection", "zunevideo", "zune", "music", "skypeapp", "bingweather", "peopleofficehub", "getstarted", "feedbackhub" };
        foreach (var pkg in packages)
        {
            await RunCommandAsync("powershell.exe", $"-Command \"Get-AppxPackage *{pkg}* | ForEach-Object {{ Remove-AppxPackage -Package $_.PackageFullName -ErrorAction SilentlyContinue }}\"");
        }
        AppendToLog("Apps pré-instalados removidos.");
    }
    private async Task DesabilitarServicos()
    {
        AppendToLog("Desabilitando serviços desnecessários...");
        await RunCommandAsync("sc.exe", "config Fax start= disabled");
        await RunCommandAsync("sc.exe", "stop Fax");
        await RunCommandAsync("sc.exe", "config MapsBroker start= disabled");
        await RunCommandAsync("sc.exe", "stop MapsBroker");
        AppendToLog("Serviços desnecessários desabilitados.");
    }
    private async Task WindowsUpdateManual()
    {
        AppendToLog("Ajustando Windows Update para manual...");
        await RunCommandAsync("sc.exe", "config wuauserv start= demand");
        await RunCommandAsync("net.exe", "stop wuauserv");
        AppendToLog("Windows Update ajustado para manual.");
    }
    private async Task EfeitosVisuaisDesempenho()
    {
        AppendToLog("Ajustando efeitos visuais para desempenho...");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects\" /v VisualFXSetting /t REG_DWORD /d 2 /f");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v ListviewAlphaSelect /t REG_DWORD /d 0 /f");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v TaskbarAnimations /t REG_DWORD /d 0 /f");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Control Panel\\Desktop\" /v DragFullWindows /t REG_SZ /d 0 /f");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Control Panel\\Desktop\" /v MenuShowDelay /t REG_SZ /d 0 /f");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Control Panel\\Desktop\" /v FontSmoothing /t REG_SZ /d 2 /f");
        await RunCommandAsync("reg.exe", "add \"HKCU\\Control Panel\\Desktop\" /v UserPreferencesMask /t REG_BINARY /d 9012038010000000 /f");
        AppendToLog("Efeitos visuais ajustados.");
    }
    private async Task SFCeCHKDSK()
    {
        AppendToLog("Executando SFC /scannow...");
        await RunCommandAsync("sfc.exe", "/scannow");
        AppendToLog("Executando CHKDSK C: /F /R...");
        await RunCommandAsync("cmd.exe", "/c chkdsk C: /F /R");
        AppendToLog("Verificação de disco agendada.");
    }
    private async Task LimparSpooler()
    {
        AppendToLog("Limpando fila de impressão (Spooler)...");
        await RunCommandAsync("net.exe", "stop spooler");
        await RunCommandAsync("cmd.exe", "/c del /q /f /s \"C:\\Windows\\System32\\spool\\PRINTERS\\*.*\"");
        await RunCommandAsync("net.exe", "start spooler");
        AppendToLog("Fila de impressão limpa.");
    }
    private async Task SolucionarRede()
    {
        AppendToLog("Solucionando problemas de conectividade de rede...");
        await RunCommandAsync("ipconfig.exe", "/release");
        await RunCommandAsync("ipconfig.exe", "/renew");
        await RunCommandAsync("ipconfig.exe", "/flushdns");
        await RunCommandAsync("netsh.exe", "winsock reset");
        AppendToLog("Configurações de rede renovadas e cache DNS limpo.");
    }
    private async Task LimparAtualizacoesAntigas()
    {
        AppendToLog("Limpando atualizações antigas do Windows...");
        await RunCommandAsync("dism.exe", "/Online /Cleanup-Image /StartComponentCleanup /ResetBase");
        AppendToLog("Atualizações antigas removidas.");
    }

    private async Task RunCommandAsync(string fileName, string arguments)
    {
        var psi = new ProcessStartInfo
        {
            FileName = fileName,
            Arguments = arguments,
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            UseShellExecute = false,
            CreateNoWindow = true,
            Verb = "runas"
        };

        using (var process = new Process { StartInfo = psi })
        {
            process.OutputDataReceived += (s, e) => { if (e.Data != null) AppendToLog(e.Data); };
            process.ErrorDataReceived += (s, e) => { if (e.Data != null) AppendToLog(e.Data); };

            process.Start();
            process.BeginOutputReadLine();
            process.BeginErrorReadLine();
            await Task.Run(() => process.WaitForExit());
        }
    }

    private void AppendToLog(string text)
    {
        if (richTextBoxLog.InvokeRequired)
            richTextBoxLog.Invoke(new Action<string>(AppendToLog), text);
        else
        {
            richTextBoxLog.AppendText(text + Environment.NewLine);
            richTextBoxLog.ScrollToCaret();
        }
    }
}
